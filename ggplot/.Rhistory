cm.knn #accuracy 89/100
#SVM Radial
svm.radial <- svm(formula=Purchased~Age + EstimatedSalary,
data = data.training,
type = "C-classification",
kernel = "radial")
#explore data
str(data.ads)
#ubah ke factorial
data.ads$User.ID <- as.factor(data.ads$User.ID)
data.ads$Purchased <- as.factor(data.ads$Purchased)
#ubah ke factorial
data.ads$User.ID <- as.factor(data.ads$User.ID)
data.ads$Purchased <- as.factor(data.ads$Purchased)
str(data.ads)
#split data ke training & testing
library(caTools)
set.seed(123)
split <- sample.split(data.ads$Purchased, SplitRatio = 3/4)
split
data.training <- data.ads[split,]
data.testing <- data.ads[!split,]
#future scaling
data.training[,3:4] <- scale(data.training[,3:4])
data.testing[,3:4] <- scale(data.testing[,3:4])
summary(data.training)
#buat plot
ggplot(data = data.training, aes(x=Age, y=EstimatedSalary,
col=Purchased))+ geom_point()
#Logistic Regression (logit)
logit <- glm(formula = Purchased~Age+EstimatedSalary,
data = data.training, family = binomial)
summary(logit)
#buat prediksi
pred <- predict(logit, newdata = data.testing, type = "response")
pred
prob_pred <- predict(logit, newdata = data.testing,
type = "response")
y_pred <- ifelse(prob_pred>=0.5,1,0)
y_pred
#conclussion matrix
cm.logit <- table(data.testing$Purchased, y_pred)
cm.logit #accuracy = 83/100
#Visualisasi
install.packages("ElemStatLearn")
library(ElemStatLearn)
set = data.testing[,3:5]
X1 = seq(min(set[,1]) - 1, max(set[,1] + 1), by=0.05)
X2 = seq(min(set[,1]) - 1, max(set[,1] + 1), by=0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age", "EstimatedSalary")
prob_set = predict(logit, type="response", newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[,-3], main = "Logistic Regression (Test Set)",
xlab = "Age", ylab="Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch='.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch=21, bg = ifelse(set[,3]==1, "green4", "red3"))
#K-NN
install.packages("class")
install.packages("class")
library(class)
prob_pred.knn <- knn(train = data.training[,3:4],
data.testing[,3:4],
k=3,
cl = data.training$Purchased,
prob = TRUE)
prob_pred.knn
y_pred.knn <-  knn(train = data.training[,3:4],
data.testing[,3:4],
k=3,
cl = data.training$Purchased,
prob = FALSE)
y_pred.knn
cm.knn <- table(data.testing$Purchased, y_pred.knn)
cm.knn #accuracy 89/100
set = data.testing[,3:5]
X1 = seq(min(set[,1]) - 1, max(set[,1] + 1), by=0.05)
X2 = seq(min(set[,1]) - 1, max(set[,1] + 1), by=0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age", "EstimatedSalary")
prob_set = predict(logit, type="response", newdata = grid_set)
y_grid = knn(train = data.training[,3:4],
test = grid_set,
k=3,
cl = data.training$Purchased,
prob = FALSE)
plot(set[,-3], main = "K-NN, k=3 (Test Set)",
xlab = "Age", ylab="Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch='.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch=21, bg = ifelse(set[,3]==1, "green4", "red3"))
#SVM Linear
library(e1071)
svm.linear <- svm(formula=Purchased~Age + EstimatedSalary,
data = data.training,
type = "C-classification",
kernel = "linear")
y_pred.svm <- predict(svm.linear, newdata = data.testing)
cm.svm <- table(data.testing$Purchased, y_pred.svm)
cm.svm #Accuracy 80/100
set = data.testing[,3:5]
X1 = seq(min(set[,1]) - 1, max(set[,1] + 1), by=0.05)
X2 = seq(min(set[,1]) - 1, max(set[,1] + 1), by=0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age", "EstimatedSalary")
prob_set = predict(logit, type="response", newdata = grid_set)
y_grid = predict(svm.linear, newdata = grid_set)
plot(set[,-3], main = "SVM Linear (Test Set)",
xlab = "Age", ylab="Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch='.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch=21, bg = ifelse(set[,3]==1, "green4", "red3"))
#SVM Radial
svm.radial <- svm(formula=Purchased~Age + EstimatedSalary,
data = data.training,
type = "C-classification",
kernel = "radial")
y_pred.svm.radial <- predict(svm.radial, newdata = data.testing)
cm.svm.radial <- table(data.testing$Purchased, y_pred.svm.radial)
cm.svm.radial #Accuracy 90/100
set = data.testing[,3:5]
X1 = seq(min(set[,1]) - 1, max(set[,1] + 1), by=0.05)
X2 = seq(min(set[,1]) - 1, max(set[,1] + 1), by=0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age", "EstimatedSalary")
prob_set = predict(logit, type="response", newdata = grid_set)
y_grid = predict(svm.radial, newdata = grid_set)
plot(set[,-3], main = "SVM Radial (Test Set)",
xlab = "Age", ylab="Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch='.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch=21, bg = ifelse(set[,3]==1, "green4", "red3"))
#Decision Tree & Random Forest
library(randomForest)
set.seed(123)
rf <- randomForest(formula = Purchased~Age + EstimatedSalary,
data = data.training, ntree = 300)
prob_pred.rf <- predict(rf, newdata = data.testing,
type = "prob")
prob_pred.rf
y_pred.rf <- predict(rf, newdata = data.testing,
type = "response")
y_pred.rf
cm.rf <- table(data.testing$Purchased, y_pred.rf)
cm.rf #Accuracy 86/100
set = data.testing[,3:5]
X1 = seq(min(set[,1]) - 1, max(set[,1] + 1), by=0.05)
X2 = seq(min(set[,1]) - 1, max(set[,1] + 1), by=0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age", "EstimatedSalary")
prob_set = predict(logit, type="response", newdata = grid_set)
y_grid = predict(rf, newdata = grid_set)
plot(set[,-3], main = "Random Forest, ntree = 300 (Test Set)",
xlab = "Age", ylab="Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch='.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch=21, bg = ifelse(set[,3]==1, "green4", "red3"))
#Baseline
table(data.testing$Purchased) #baseline = 64%
#ROC
install.packages("pROC")
install.packages("pROC")
library(pROC)
#logit
ROC_logit <- roc(data.testing$Purchased, prob_pred)
#logit
ROC_logit <- roc(data.testing$Purchased, prob_pred)
plot(ROC_logit)
AUC_logit <- auc(ROC_logit)
AUC_logit #0.91
#KNN
ROC_knn <- roc(data.testing$Purchased, as.factor(prob_pred.knn))
plot(ROC_knn)
AUC_knn <- auc(ROC_knn)
AUC_knn #0.88
#Random FOrest
ROC_rf <- roc(data.testing$Purchased, prob_pred.rf[,2])
plot(ROC_rf)
AUC_rf <- auc(ROC_rf)
AUC_rf #0.91
#baseline
table(data.testing$not_paid)
#Prediksi variabel not_paid
str(data.credit)
data.credit$not_paid <- as.factor(data.credit$not_paid)
str(data.credit)
#split data
set.seed(123)
split<- sample.split(data.credit$not_paid, SplitRatio=3/4)
split
data.training <- data.credit[split,]
data.testing <- data.credit[!split,]
#KNN
install.packages("class")
install.packages("class")
library(class)
prob_pred.knn <- knn(train = data.training[,1],
data.testing[,1],
k=3,
cl = data.training$not_paid,
prob = TRUE)
prob_pred.knn
y_pred.knn <-  knn(train = data.training[,1],
data.testing[,1],
k=3,
cl = data.training$not_paid,
prob = FALSE)
y_pred.knn
cm.knn <- table(data.testing$not_paid, y_pred.knn)
cm.knn #accuracy 89/100
#baseline
table(data.testing$not_paid)
#Baseline
table(data.testing$Purchased) #baseline = 64%
#baseline
table(data.testing$not_paid)
prob_pred.knn <- knn(train = data.training[,2:3],
data.testing[,2:3],
k=3,
cl = data.training$not_paid,
prob = TRUE)
prob_pred.knn
y_pred.knn <-  knn(train = data.training[,2:3],
data.testing[,2:3],
k=3,
cl = data.training$not_paid,
prob = FALSE)
y_pred.knn
cm.knn <- table(data.testing$not_paid, y_pred.knn)
cm.knn #accuracy 89/100
cm.knn #accuracy 89/100
#Prediksi variabel not_paid
str(data.credit)
data.credit$not_paid <- as.factor(data.credit$not_paid)
data.credit$verified <- as.factor(data.credit$verified)
data.credit$grdCtoA <- as.factor(data.credit$grdCtoA)
str(data.credit)
#Logit
logit.model <- glm(formula = not_paid ~., data = data.training,
family = binomial)
summary(logit.model)
logit.model2 <- step(logit.model, direction = "both")
summary(logit.model2)
fm <- logit.model2$formula
prob.pred.logit <- predict(logit.model2, data.testing, type="response")
y.pred.logit <- ifelse(prob.pred.logit >=0.5, 1, 0)
#SVM
svm.model <- svm(formula = as.numeric(not_paid) ~ installment + grdCtoA + annual_inc + verified,
data = data.training, type = "eps-regression",
kernel = "radial")
prob.pred.svm <- predict(svm.model, data.testing) - 1
prob.pred.svm <- ifelse(prob.pred.svm >= 1, 1, prob.pred.svm)
prob.pred.svm <- ifelse(prob.pred.svm <= 0, 0, prob.pred.svm)
y.pred.svm <- ifelse(prob.pred.svm >= 0.5, 1, 0)
#Baseline
table(data.testing$not_paid) #baseline = 64%
#Baseline
table(data.testing$not_paid) #baseline = 64%
#Tentukan baseline
table(data.testing$not_paid) #50%
#Evaluasi model (Accuracy, ROC, AUC)
table(data.testing$not_paid, y.pred.logit) #57.98%
table(data.testing$not_paid, y.pred.rf) #58.5%
table(data.testing$not_paid, y.pred.svm) #57.21%
y.pred.svm <- ifelse(prob.pred.svm >= 0.5, 1, 0)
#Baseline
table(data.testing$not_paid) #baseline = %
#accuracy, precision, recall, AUC
table(data.testing$not_paid, y.pred.logit)
table(data.testing$not_paid, y.pred.svm)
library(pROC)
ROC.logit <- roc(data.testing$not_paid, prob.pred.logit)
#SVM
svm.model <- svm(formula = as.numeric(not_paid) ~ installment + grdCtoA + annual_inc + verified,
data = data.training, type = "eps-regression",
kernel = "radial")
prob_pred.svm <- predict(svm.model, data.testing) - 1
prob_pred.svm <- ifelse(prob.pred.svm >= 1, 1, prob.pred.svm)
prob_pred.svm <- ifelse(prob.pred.svm <= 0, 0, prob.pred.svm)
y_pred.svm <- ifelse(prob.pred.svm >= 0.5, 1, 0)
#Baseline
table(data.testing$not_paid) #baseline = %
#accuracy, precision, recall, AUC
table(data.testing$not_paid, y.pred.logit)
table(data.testing$not_paid, y.pred.svm)
ROC.logit <- roc(data.testing$not_paid, prob.pred.logit)
ROC.svm <- roc(data.testing$not_paid, prob.pred.svm)
ROC.logit <- roc(data.testing$not_paid, prob_pred.logit)
ROC.svm <- roc(data.testing$not_paid, prob_pred.svm)
plot(ROC.logit, col="red")
lines(ROC.rf, col="blue")
lines(ROC.svm, col="green")
auc(ROC.logit)
auc(ROC.rf)
auc(ROC.svm)
data.credit$X <- NULL
str
str(data.credit)
#split data
set.seed(123)
split<- sample.split(data.credit$not_paid, SplitRatio=3/4)
split
data.training <- data.credit[split,]
data.testing <- data.credit[!split,]
split<- sample.split(data.credit$not_paid, SplitRatio=2/3)
split
data.training <- data.credit[split,]
data.testing <- data.credit[!split,]
#Logit
logit.model <- glm(formula = not_paid ~., data = data.training,
family = binomial)
summary(logit.model)
logit.model2 <- step(logit.model, direction = "both")
summary(logit.model2)
fm <- logit.model2$formula
prob.pred.logit <- predict(logit.model2, data.testing, type="response")
y.pred.logit <- ifelse(prob.pred.logit >=0.5, 1, 0)
#SVM
svm.model <- svm(formula = as.numeric(not_paid) ~ installment + grdCtoA + annual_inc + verified,
data = data.training, type = "eps-regression",
kernel = "radial")
#SVM
svm.model <- svm(formula = as.numeric(not_paid) ~ installment + grdCtoA + annual_inc + verified,
data = data.training, type = "eps-regression",
kernel = "radial")
prob_pred.svm <- predict(svm.model, data.testing) - 1
prob_pred.svm <- ifelse(prob.pred.svm >= 1, 1, prob.pred.svm)
prob_pred.svm <- ifelse(prob.pred.svm <= 0, 0, prob.pred.svm)
y_pred.svm <- ifelse(prob.pred.svm >= 0.5, 1, 0)
#Baseline
table(data.testing$not_paid) #baseline = %
#Logit
logit.model <- glm(formula = not_paid ~., data = data.training,
family = binomial)
summary(logit.model)
logit.model2 <- step(logit.model, direction = "both")
summary(logit.model2)
fm <- logit.model2$formula
prob.pred.logit <- predict(logit.model2, data.testing, type="response")
y.pred.logit <- ifelse(prob.pred.logit >=0.5, 1, 0)
cm.logit <- table(data.testing$not_paid, y_pred)
cm.logit #accuracy = 83/100
y_pred.logit <- ifelse(prob.pred.logit >=0.5, 1, 0)
cm.logit <- table(data.testing$not_paid, y_pred.logit)
cm.logit #accuracy = /100
cm.svm <- table(data.testing$not_paid, y_pred.svm)
y_pred.svm <- ifelse(prob.pred.svm >= 0.5, 1, 0)
cm.svm <- table(data.testing$not_paid, y_pred.svm)
y_pred.svm <- ifelse(prob.pred.svm >= 0.5, 1, 0)
cm.svm <- table(data.testing$not_paid, y_pred.svm)
#SVM
svm.model <- svm(formula = as.numeric(not_paid) ~ installment + grdCtoA + annual_inc + verified,
data = data.training, type = "eps-regression",
kernel = "radial")
prob_pred.svm <- predict(svm.model, data.testing) - 1
prob_pred.svm <- ifelse(prob.pred.svm >= 1, 1, prob.pred.svm)
prob_pred.svm <- ifelse(prob.pred.svm <= 0, 0, prob.pred.svm)
y_pred.svm <- ifelse(prob.pred.svm >= 0.5, 1, 0)
cm.svm <- table(data.testing$not_paid, y_pred.svm)
ROC.logit <- roc(data.testing$not_paid, prob_pred.logit)
ROC.svm <- roc(data.testing$not_paid, prob_pred.svm)
plot(ROC.logit, col="red")
lines(ROC.svm, col="green")
auc(ROC.logit)
auc(ROC.rf)
auc(ROC.svm)
cm.svm <- table(data.testing$not_paid, y_pred.svm)
#Prediksi variabel not_paid
str(data.credit)
data.credit$not_paid <- as.factor(data.credit$not_paid)
data.credit$verified <- as.factor(data.credit$verified)
data.credit$grdCtoA <- as.factor(data.credit$grdCtoA)
str(data.credit)
data.credit$X <- NULL
str(data.credit)
#split data
set.seed(123)
split<- sample.split(data.credit$not_paid, SplitRatio=2/3)
split
data.training <- data.credit[split,]
data.testing <- data.credit[!split,]
#Baseline
table(data.testing$not_paid) #baseline = 50%
#Logit
logit.model <- glm(formula = not_paid ~., data = data.training,
family = binomial)
summary(logit.model)
logit.model2 <- step(logit.model, direction = "both")
summary(logit.model2)
fm <- logit.model2$formula
prob.pred.logit <- predict(logit.model2, data.testing, type="response")
y_pred.logit <- ifelse(prob.pred.logit >=0.5, 1, 0)
cm.logit <- table(data.testing$not_paid, y_pred.logit)
cm.logit #accuracy =
#SVM
svm.model <- svm(formula = as.numeric(not_paid) ~ installment + grdCtoA + annual_inc + verified,
data = data.training, type = "eps-regression",
kernel = "radial")
prob_pred.svm <- predict(svm.model, data.testing) - 1
prob_pred.svm <- ifelse(prob.pred.svm >= 1, 1, prob.pred.svm)
prob_pred.svm <- ifelse(prob.pred.svm <= 0, 0, prob.pred.svm)
y_pred.svm <- ifelse(prob.pred.svm >= 0.5, 1, 0)
cm.svm <- table(data.testing$not_paid, y_pred.svm)
#accuracy, precision, recall, AUC
table(data.testing$not_paid, y.pred.logit)
table(data.testing$not_paid, y.pred.svm)
#accuracy, precision, recall, AUC
table(data.testing$not_paid, y_pred.logit)
table(data.testing$not_paid, y_pred.svm)
summary(logit.model2)
prob.pred.logit <- predict(logit.model2, data.testing, type="response")
y_pred.logit <- ifelse(prob.pred.logit >=0.5, 1, 0)
cm.logit <- table(data.testing$not_paid, y_pred.logit)
cm.logit #accuracy =
#SVM
svm.model <- svm(formula = as.numeric(not_paid) ~ installment + grdCtoA + annual_inc + verified,
data = data.training, type = "eps-regression",
kernel = "radial")
prob_pred.svm <- predict(svm.model, data.testing) - 1
prob_pred.svm <- ifelse(prob.pred.svm >= 1, 1, prob.pred.svm)
prob_pred.svm <- ifelse(prob.pred.svm <= 0, 0, prob.pred.svm)
y_pred.svm <- ifelse(prob.pred.svm >= 0.5, 1, 0)
cm.svm <- table(data.testing$not_paid, y_pred.svm)
cm.svm <- table(data.testing$not_paid, y_pred.svm)
cm.logit #accuracy =
ROC.logit <- roc(data.testing$not_paid, prob_pred.logit)
ROC.svm <- roc(data.testing$not_paid, prob_pred.svm)
plot(ROC.logit, col="red")
lines(ROC.svm, col="green")
auc(ROC.logit)
auc(ROC.rf)
auc(ROC.svm)
auc(ROC.logit)
auc(ROC.svm)
str(data.credit)
data.credit$not_paid <- as.factor(data.credit$not_paid)
data.credit$verified <- as.factor(data.credit$verified)
data.credit$grdCtoA <- as.factor(data.credit$grdCtoA)
str(data.credit)
data.credit$X <- NULL
str(data.credit)
#split data
set.seed(123)
split<- sample.split(data.credit$not_paid, SplitRatio=2/3)
split
data.training <- data.credit[split,]
data.testing <- data.credit[!split,]
#Baseline
table(data.testing$not_paid) #baseline = 50%
#Logit
logit.model <- glm(formula = not_paid ~., data = data.training,
family = binomial)
summary(logit.model)
logit.model2 <- step(logit.model, direction = "both")
summary(logit.model2)
prob.pred.logit <- predict(logit.model2, data.testing, type="response")
y_pred.logit <- ifelse(prob.pred.logit >=0.5, 1, 0)
cm.logit <- table(data.testing$not_paid, y_pred.logit)
cm.logit #accuracy =
#SVM
svm.model <- svm(formula = as.numeric(not_paid) ~ installment + grdCtoA + annual_inc + verified,
data = data.training, type = "eps-regression",
kernel = "radial")
prob_pred.svm <- predict(svm.model, data.testing) - 1
prob_pred.svm <- ifelse(prob.pred.svm >= 1, 1, prob.pred.svm)
prob_pred.svm <- ifelse(prob.pred.svm <= 0, 0, prob.pred.svm)
y_pred.svm <- ifelse(prob.pred.svm >= 0.5, 1, 0)
cm.svm <- table(data.testing$not_paid, y_pred.svm)
#accuracy, precision, recall, AUC
table(data.testing$not_paid, y_pred.logit)
table(data.testing$not_paid, y_pred.svm)
library(pROC)
ROC.logit <- roc(data.testing$not_paid, prob_pred.logit)
ROC.svm <- roc(data.testing$not_paid, prob_pred.svm)
plot(ROC.logit, col="red")
lines(ROC.svm, col="green")
auc(ROC.logit)
auc(ROC.svm)
install.packages("caret")
install.packages("caret")
library(caret)
train.control <- trainControl(method = "cv", number = 10)
#explore data
str(data.ads)
#ubah ke factorial
data.ads$User.ID <- as.factor(data.ads$User.ID)
data.ads$Purchased <- as.factor(data.ads$Purchased)
str(data.ads)
set.seed(123)
split <- sample.split(data.ads$Purchased, SplitRatio = 3/4)
split
data.training <- data.ads[split,]
data.testing <- data.ads[!split,]
model <- train(formula = Purchased ~ Age + EstimatedSalary,
data = data.training, method = "glm", family = "binomial",
trControl = train.control)
model <- train(Purchased ~ Age + EstimatedSalary, data = data.training, method = "glm",
family = "binomial", trControl = train.control)
train.control <- trainControl(method = "cv", number = 10)
model <- train(Purchased ~ Age + EstimatedSalary, data = data.training, method = "glm",
family = "binomial", trControl = train.control)
summary(model)
predict(model, data.testing)
print(model)
Finance.Data <- read.csv("D:/Data Science Fundamentals-20191206T135430Z-001/Data Science Fundamentals/Week 1/datasets/Finance-Data.R", header=FALSE, comment.char="#")
View(Finance.Data)
